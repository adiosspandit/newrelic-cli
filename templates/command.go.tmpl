{{- $packageName := .PackageName -}}
package {{ $packageName }}

{{- if gt (len .Imports) 0 }}
import (
  {{- range .Imports }}
  {{ . }}
  {{- end }}
)
{{- end }}

{{ range .Commands }}

var {{ .CmdVariableName }} = &cobra.Command{
  Use: {{ .Name | quote }},
  Short: {{ .ShortDescription | quote }},
  Long: {{ .LongDescription | quote }},
  Example: "newrelic {{ $packageName }} {{ .Name }} --help",
}

{{ range .Subcommands }}
{{- $cmdVarName := .CmdVariableName -}}

{{ range .Flags }}
var {{ .VariableName }} {{ .VariableType }}
{{- end }}

var {{ $cmdVarName }} = &cobra.Command{
  Use: {{ .Name | quote }},
  Short: {{ .ShortDescription | quote }},
  Long: {{ .LongDescription | quote }},
  Example: {{ .Example | quote }},
  Run: func(cmd *cobra.Command, args []string) {
    client.WithClient(func(nrClient *newrelic.NewRelic) {
      {{- range .Flags -}}
      {{- if .IsInputType -}}
      var {{ .Name }} {{ .ClientType }}

      err := json.Unmarshal([]byte({{ .VariableName }}), &{{ .Name }})
      if err != nil {
        log.Fatal(err)
      }
      {{- end -}}
      {{ end }}

      resp, err := {{ .ClientMethod }}({{ .ClientMethodArgs | join ", " }})
      if err != nil {
        log.Fatal(err)
      }

      if err := output.Print(resp); err != nil {
        log.Fatal(err)
      }
    })
  },
}
{{- end }}
{{- end }}

func init() {
{{ range .Commands }}
{{- $parentCmdVarName := .CmdVariableName -}}

{{ range .Subcommands }}
{{- $cmdVarName := .CmdVariableName -}}

  {{ $parentCmdVarName }}.AddCommand({{ $cmdVarName }})

{{ range .Flags }}
  {{- $defaultVal := .DefaultValue | quote -}}
  {{- if (eq .Type "int") -}}
    {{- $defaultVal = 0 -}}
  {{- end}}

  {{ $cmdVarName }}.Flags().{{- .FlagMethodName -}}(&{{ .VariableName }}, {{ .Name | quote }}, {{ $defaultVal }}, {{ .Description | quote }})
  {{- if .Required }}
  if err := {{- $cmdVarName -}}.MarkFlagRequired({{.Name | quote }}); err != nil {
    log.Error(err)
  }
  {{ end }}
{{- end }}
{{- end }}
{{- end }}
}
